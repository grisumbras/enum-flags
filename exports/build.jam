import make ;
import path ;
import print ;
import property-set ;
import feature ;

import b2/install-extra : install ;


make enum-flags.pc : : @write-pc ;
local install-pc = [ install (libdir)/pkgconfig : enum-flags.pc ] ;

make enumflags-config.cmake : : @write-cmake-config ;
make enumflags-config-version.cmake : : @write-cmake-version ;
local install-cmake
  = [ install (libdir)/cmake/enumflags-$(VERSION)
    : enumflags-config.cmake
      enumflags-config-version.cmake
    ] ;

alias install : $(install-pc) $(install-cmake) ;
explicit install ;


rule write-pc  ( target : sources * : properties * ) {
  local ps = [ property-set.create $(properties) ] ;

  local prefix = [ install-extra.get-dir prefix : $(ps) ] ;
  prefix = [ install-extra.target-native-path $(prefix) : $(ps) ] ;

  local includedir = [ install-extra.get-dir includedir : $(ps) : relative ] ;
  includedir = [ path.root $(includedir) "${prefix}" ] ;
  includedir = [ install-extra.target-native-path $(includedir) : $(ps) ] ;

  write $(target)
    : "prefix=$(prefix)"
      "includedir=$(includedir)"
      ""
      "Name: enum-flags"
      "Description: Bit-flags for C++ scoped enums"
      "Version: $(VERSION)"
      "Cflags: -I${includedir}"
      ""
    ;
}


rule write-cmake-config ( target : sources * : properties * ) {
  local ps = [ property-set.create $(properties) ] ;
  local includedir = [ install-extra.get-dir includedir : $(ps) ] ;

  write $(target)
    : "if(TARGET EnumFlags::EnumFlags)"
      "  return()"
      "endif()"
      ""
      "add_library(EnumFlags::EnumFlags INTERFACE IMPORTED)"
      "set_target_properties("
      "  EnumFlags::EnumFlags"
      "  PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"$(includedir)\""
      ")"
      ""
    ;
}


rule write-cmake-version ( target : sources * : properties * ) {
  write $(target)
    : "set(PACKAGE_VERSION $(VERSION))"
      ""
      "if(NOT PACKAGE_FIND_VERSION OR PACKAGE_FIND_VERSION EQUAL $(VERSION))"
      "  set(PACKAGE_VERSION_EXACT TRUE)"
      "  set(PACKAGE_VERSION_COMPATIBLE TRUE)"
      "  set(PACKAGE_VERSION_UNSUITABLE FALSE)"
      "else()"
      "  set(PACKAGE_VERSION_EXACT FALSE)"
      "  set(PACKAGE_VERSION_COMPATIBLE FALSE)"
      "  set(PACKAGE_VERSION_UNSUITABLE TRUE)"
      "endif()"
      ""
    ;
}


local rule write ( target : content * ) {
  print.output $(target) ;
  print.text $(content) ;
}
